/*
 * Copyright 2012 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.openbidder.ui.util.web;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;
import com.google.common.io.CharStreams;

import org.joda.time.Instant;
import org.springframework.web.servlet.support.RequestContext;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Map;

import javax.annotation.Nullable;
import javax.servlet.http.HttpServletRequest;

/**
 * Utility methods.
 */
public class WebUtils {

  private WebUtils() {
  }

  /**
   * @return All HTTP request parameters to a {@link Multimap}
   */
  public static ImmutableMultimap<String, String> convertParameters(HttpServletRequest request) {
    ImmutableMultimap.Builder<String, String> builder = ImmutableMultimap.builder();
    for (Enumeration<?> e = request.getParameterNames(); e.hasMoreElements(); ) {
      String parameterName = (String) e.nextElement();
      for (String parameterValue : request.getParameterValues(parameterName)) {
        builder.put(parameterName, parameterValue);
      }
    }
    return builder.build();
  }

  /**
   * @return HTTP request headers in a more usable form than {@link Enumeration}s.
   */
  public static ImmutableMultimap<String, String> convertHeaders(HttpServletRequest request) {
    ImmutableMultimap.Builder<String, String> builder = ImmutableMultimap.builder();
    for (Enumeration<?> e = request.getHeaderNames(); e.hasMoreElements(); ) {
      String headerName = (String) e.nextElement();
      for (Enumeration<?> f = request.getHeaders(headerName); f.hasMoreElements(); ) {
        String value = (String) f.nextElement();
        builder.put(headerName, value);
      }
    }
    return builder.build();
  }

  /**
   * @return All the attributes on an {@link HttpServletRequest} as a {@link Map}.
   */
  public static ImmutableMap<String, Object> convertAttributes(HttpServletRequest request) {
    ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
    for (Enumeration<?> e = request.getAttributeNames(); e.hasMoreElements(); ) {
      String attributeName = (String) e.nextElement();
      builder.put(attributeName, request.getAttribute(attributeName));
    }
    return builder.build();
  }

  /**
   * Translates a collection of instances supporting {@link MessageCode} into a {@link Map}
   * of those instances to the localized message string that code represents.
   */
  public static <T extends MessageCode> Map<T, String> buildMessageMap(
      Iterable<? extends T> values,
      RequestContext requestContext) {

    ImmutableMap.Builder<T, String> builder = ImmutableMap.builder();
    for (T value : values) {
      builder.put(value, requestContext.getMessage(value.getMessageCode()));
    }
    return builder.build();
  }

  /**
   * Certain HTTP requests aren't external. They're generated by things like task queue
   * handlers, scheduled tasks (cron) and administrative callbacks (eg channel presence
   * callbacks). These callbacks don't run as a logged in user. We trust the AppEngine
   * environment to restrict those to admin-only if called from the browser.
   * <p>
   * We otherwise need to identify them typically to not perform
   * interceptor actions, which otherwise require a logged in user.
   */
  public static boolean isInternalRequest(HttpServletRequest request) {
    String requestUri = request.getRequestURI();
    return requestUri.startsWith("/_ah/")
        || requestUri.startsWith("/cron/");
  }

  /**
   * Simple method for reading a {@link BufferedReader} into a {@link String}. If there are
   * any errors then simply return {@code null}. This is intended as a debugging tool eg
   * when a JSON request cannot be parsed.
   */
  public static String readBuffer(BufferedReader bufferedReader) {
    try {
      return CharStreams.toString(bufferedReader);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * @return {@link Instant} from an ISO 8601 compliant date time format or {@code null} if
   * {@code date} is {@code null}
   */
  public static @Nullable Instant parse8601(@Nullable String date) {
    return date == null ? null : Instant.parse(date);
  }
}
